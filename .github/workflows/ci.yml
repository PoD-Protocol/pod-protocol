name: CI
on: [push, pull_request]

jobs:
  lint:
    name: "🎨 Lint & Format"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install Solana CLI
        run: |
          sh -c "$(curl -sSfL https://release.solana.com/v1.18.26/install)"
          echo "$HOME/.local/share/solana/install/active_release/bin" >> $GITHUB_PATH
          export PATH="$HOME/.local/share/solana/install/active_release/bin:$PATH"
          solana --version

      - name: Install Solana CLI
        run: |
          sh -c "$(curl -sSfL https://release.solana.com/v1.18.26/install)"
          echo "$HOME/.local/share/solana/install/active_release/bin" >> $GITHUB_PATH
          export PATH="$HOME/.local/share/solana/install/active_release/bin:$PATH"
          solana --version
        with:
          components: rustfmt, clippy

      - name: Install Solana CLI
        run: |
          sh -c "$(curl -sSfL https://release.solana.com/v1.18.26/install)"
          echo "$HOME/.local/share/solana/install/active_release/bin" >> $GITHUB_PATH
          export PATH="$HOME/.local/share/solana/install/active_release/bin:$PATH"
          solana --version

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            ~/.cargo/registry
            ~/.cargo/git
            node_modules
            sdk/node_modules
            cli/node_modules
            frontend/node_modules
            frontend/node_modules
            frontend/node_modules
          key: ${{ runner.os }}-lint-${{ hashFiles('**/bun.lock', '**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-lint-

      - name: Install dependencies
        run: |
          echo "📦 Installing workspace dependencies..."
          bun install --frozen-lockfile
          echo "📦 Installing frontend dependencies..."
          cd frontend && bun install --frozen-lockfile
          echo "✅ All dependencies installed"

      - name: Lint TypeScript & Prettier
        run: |
          echo "🎨 Running TypeScript and Prettier linting..."
          bun run lint:all

      - name: Lint Frontend
        run: |
          echo "🎨 Running frontend linting..."
          cd frontend && bun run lint

      - name: Lint Rust
        run: |
          echo "🦀 Running Rust linting..."
          cd programs/pod-com
          cargo fmt -- --check
          cargo clippy -- -D warnings

  security-audit:
    name: "🔒 Security Audit (LOW-01)"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-audit
        run: cargo install cargo-audit --locked

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            ~/.cargo/registry
            ~/.cargo/git
            node_modules
            sdk/node_modules
            cli/node_modules
            frontend/node_modules
          key: ${{ runner.os }}-security-${{ hashFiles('**/bun.lock', '**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-security-

      - name: Install dependencies
        run: |
          echo "📦 Installing all workspace dependencies..."
          bun install --frozen-lockfile
          echo "📦 Installing frontend dependencies..."
          cd frontend && bun install --frozen-lockfile
          echo "✅ All dependencies installed"

      - name: Rust Security Audit
        run: |
          echo "🔒 Running Rust security audit..."
          cd programs/pod-com
          cargo audit --deny warnings
          echo "✅ Rust security audit passed"

      - name: Node.js Security Audit (Root)
        run: |
          echo "🔒 Running Node.js security audit for root workspace..."
          bun audit --audit-level high
          echo "✅ Root workspace security audit passed"

      - name: Node.js Security Audit (SDK)
        run: |
          echo "🔒 Running Node.js security audit for SDK..."
          cd sdk
          bun audit --audit-level high
          echo "✅ SDK security audit passed"

      - name: Node.js Security Audit (CLI)
        run: |
          echo "🔒 Running Node.js security audit for CLI..."
          cd cli
          bun audit --audit-level high
          echo "✅ CLI security audit passed"

      - name: Node.js Security Audit (Frontend)
        run: |
          echo "🔒 Running Node.js security audit for Frontend..."
          cd frontend
          bun audit --audit-level high
          echo "✅ Frontend security audit passed"

      - name: Check for known vulnerabilities in dependencies
        run: |
          echo "🔍 Checking for vulnerable patterns in code..."
          # Check for common security anti-patterns
          if grep -r --include="*.ts" --include="*.js" --include="*.rs" -n "eval\|innerHTML\|dangerouslySetInnerHTML" . ; then
            echo "⚠️ Warning: Found potentially dangerous patterns. Review for security implications."
          fi
          
          # Check for hardcoded secrets (basic patterns)
          if grep -r --include="*.ts" --include="*.js" --include="*.rs" -i "password\|secret\|key\|token" . | grep -v "test\|example\|placeholder" | grep "=" ; then
            echo "⚠️ Warning: Found potential hardcoded credentials. Review for security implications."
          fi
          
          echo "✅ Security pattern check completed"

  build:
    name: "🏗️ Build All"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config build-essential libudev-dev

      - name: Install Anchor CLI via avm
        run: |
          cargo install --git https://github.com/coral-xyz/anchor avm --locked --force
          avm install 0.31.1
          avm use 0.31.1

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            ~/.cargo/registry
            ~/.cargo/git
            target
            node_modules
            sdk/node_modules
            cli/node_modules
          key: ${{ runner.os }}-build-${{ hashFiles('**/bun.lock', '**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-build-

      - name: Install dependencies
        run: |
          echo "📦 Installing all workspace dependencies..."
          bun install --frozen-lockfile
          echo "📦 Installing frontend dependencies..."
          cd frontend && bun install --frozen-lockfile
          echo "�� All dependencies installed"

      - name: Build Solana Program
        run: |
          echo "⚓ Building Anchor program..."
          anchor build
          echo "✅ Anchor program built successfully"

      - name: Build SDK
        run: |
          echo "📦 Building SDK..."
          cd sdk && bun run build
          echo "✅ SDK built successfully"

      - name: Build CLI
        run: |
          echo "🔧 Building CLI..."
          cd cli && bun run build
          echo "✅ CLI built successfully"

      - name: Build Frontend
        run: |
          echo "🌐 Building Frontend..."
          cd frontend && bun install --frozen-lockfile && bun run build
          echo "✅ Frontend built successfully"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            target/deploy/
            target/idl/
            sdk/dist/
            cli/dist/
            frontend/.next/

  test:
    name: "🧪 Test Suite"
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config build-essential libudev-dev netcat-openbsd curl

      - name: Install Anchor CLI via avm
        run: |
          cargo install --git https://github.com/coral-xyz/anchor avm --locked --force
          avm install 0.31.1
          avm use 0.31.1

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            ~/.cargo/registry
            ~/.cargo/git
            node_modules
            sdk/node_modules
            cli/node_modules
          key: ${{ runner.os }}-test-${{ hashFiles('**/bun.lock', '**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-test-

      - name: Install dependencies
        run: |
          echo "📦 Installing workspace dependencies for testing..."
          bun install --frozen-lockfile
          echo "📦 Installing frontend dependencies..."
          cd frontend && bun install --frozen-lockfile
          echo "✅ Dependencies installed"

      - name: Setup Solana keypair
        run: |
          mkdir -p ~/.config/solana
          solana-keygen new --no-bip39-passphrase -o ~/.config/solana/id.json
          solana config set --url localhost

      - name: Start and Wait for Solana Test Validator
        run: |
          echo "🚀 Starting Solana test validator..."
          solana-test-validator --reset --quiet --log /tmp/validator.log &
          VALIDATOR_PID=$!
          echo "Validator PID: $VALIDATOR_PID"
          
          echo "⏳ Waiting for validator to be ready..."
          for i in {1..60}; do
            if nc -z localhost 8899 && nc -z localhost 8900; then
              echo "✅ Validator is ready on ports 8899 (RPC) and 8900 (WebSocket)"
              
              # Additional health check
              if curl -s -X POST -H "Content-Type: application/json" \
                -d '{"jsonrpc":"2.0","id":1,"method":"getHealth"}' \
                http://localhost:8899 | grep -q '"result":"ok"'; then
                echo "✅ Validator health check passed"
                break
              fi
            fi
            
            if [ $i -eq 60 ]; then
              echo "❌ Validator did not start within 60 seconds"
              echo "📋 Validator logs:"
              if [ -f /tmp/validator.log ]; then
                tail -50 /tmp/validator.log
              fi
              kill $VALIDATOR_PID 2>/dev/null || true
              exit 1
            fi
            
            if [ $((i % 10)) -eq 0 ]; then
              echo "⏳ Attempt $i/60: Still waiting for validator..."
            fi
            sleep 1
          done

      - name: Run Anchor Tests
        run: anchor test --skip-build

      - name: Run SDK & CLI Tests
        run: bun run test

      - name: Stop Solana test validator
        run: pkill -f solana-test-validator || true